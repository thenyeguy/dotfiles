#!/usr/bin/env python

import argparse
import json
import re
import sys
import textwrap

parser = argparse.ArgumentParser(
    description=textwrap.dedent("""\
      Tools for manipulating JSON.

      All modes take a single encoded JSON object from stdin, and write to stdout.
      """).strip(),
    formatter_class=argparse.RawDescriptionHelpFormatter)
subparsers = parser.add_subparsers()

def get_payload():
    return json.load(sys.stdin)


def pretty_print(args):
    print json.dumps(get_payload(), indent=args.indent, sort_keys=args.sort)

parser_pretty = subparsers.add_parser("pretty", help="pretty print JSON")
parser_pretty.add_argument("--indent", type=int, default=2,
                           help="indent level")
parser_pretty.add_argument("--nosort", dest="sort", action="store_false")
parser_pretty.add_argument("--sort", dest="sort", action="store_true",
                           help="if set, sorts json keys")
parser_pretty.set_defaults(sort=True)
parser_pretty.set_defaults(func=pretty_print)


def get_field(args):
    payload = get_payload()
    for key in args.key:
      payload = payload[key]
    if isinstance(payload, dict):
      print json.dumps(payload)
    else:
      print payload

parser_pretty = subparsers.add_parser("get", help="gets a single json field")
parser_pretty.add_argument("key", type=str, nargs="+", help="the keys to read")
parser_pretty.set_defaults(func=get_field)


def main(args):
    args = parser.parse_args()
    try:
        args.func(args)
    except Exception:
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
