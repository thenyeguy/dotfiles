# ------------------------- #
# CUSTOMIZE EDITOR BEHAVIOR #
# ------------------------- #

colorscheme gruvbox

set-option global startup_info_version 20191211
set-option global ui_options ncurses_assistant=none

set-option global tabstop 4
set-option global indentwidth 4
set-option global scrolloff 5,5


# ---------------------- #
# CUSTOMIZE HIGHLIGHTERS #
# ---------------------- #

# Line number gutter:
add-highlighter global/ number-lines -hlcursor

# Line wrapping:
add-highlighter global/ wrap -word -indent -marker "└──>"

# Highligh matching braces:
add-highlighter global/ show-matching

# Highlight whitespace:
add-highlighter global/ show-whitespaces -lf " " -spc " " -tab "→"

# Highlight todos
add-highlighter global/todo regex "TODO(\(.*?\))?:?" 0:Todo


# ------------------ #
# CUSTOMIZE KEYBINDS #
# ------------------ #

# Shuffle leader, command and anchor commands.
map global normal <space> ,        # leader
map global normal \; ":"           # command mode
map global normal , "<a-;>"        # swap anchors
map global normal <a-,> "<space>"  # cancel multiple selections

# More convenient line selection
map global normal X "<a-x>"
map global normal <a-x> "X"

# More convenient search
map global normal / "/(?i)"
map global normal N <a-n>
map global normal <a-n> N

# More convenient yanking
map global normal D "<a-x>d"
map global normal Y "<a-x>y"

# Clipboard integration
map global user y "<a-|>clipboard copy<ret>" -docstring "copy to clipboard"
map global user p "o<esc>!clipboard paste<ret>" \
    -docstring "paste after from clipboard"
map global user P "O<esc>!clipboard paste<ret>" \
    -docstring "paste before from clipboard"

# Commenting shortcut
map global user c ":comment-line<ret>"  -docstring "comment selected lines"

# Pane splitting (preserving buffer and line number)
define-command split -params 1 -docstring "Splits the current pane" %{
    nop %sh{
        if [[ "$kak_buffile" != \**\* ]]; then
            file="+$kak_cursor_line $kak_buffile"
        fi
        ~/.dotfiles/tmux/split.sh $1 kak -c "$kak_session" $file
    }
}
map global user s ":split -v<ret>" -docstring "split vertically"
map global user S ":split -h<ret>" -docstring "split horizontally"
map global user q ":quit<ret>" -docstring "close current split"

# Intelligent escape
define-command escape -docstring "Intelligently handle escape key" %{
    execute-keys -with-hooks %sh{
        if (( "$kak_selection_length" > 1 )); then
            # Collapse selections when larger than one character.
            printf "\;"
        else
            # Otherwise, cancel multiple selection.
            printf "<space>"
        fi
    }
}
map global normal <esc> ":escape<ret>" -docstring "smart escape"

# Intelligent tab completion
hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft "h<a-K>\h<ret>"
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


# ---------------- #
# LOAD EXTRA FILES #
# ---------------- #

evaluate-commands %sh{
    for file in $kak_config/rc/*.kak; do
        printf 'source "%s"\n' $file
    done
}
