# ------------------------- #
# CUSTOMIZE EDITOR BEHAVIOR #
# ------------------------- #

colorscheme gruvbox

set-option global startup_info_version 20200117
set-option global ui_options ncurses_assistant=none

set-option global tabstop 4
set-option global indentwidth 4
set-option global scrolloff 5,5


# ---------------------- #
# CUSTOMIZE HIGHLIGHTERS #
# ---------------------- #

# Line number gutter:
add-highlighter global/ number-lines -hlcursor

# Line wrapping:
add-highlighter global/ wrap -word -indent -marker "└──>"

# Highligh matching braces:
add-highlighter global/ show-matching

# Highlight whitespace:
add-highlighter global/ show-whitespaces -lf " " -spc " " -tab "→"

# Highlight todos
add-highlighter global/todo regex "TODO(\(.*?\))?:?" 0:Todo


# ------------------ #
# CUSTOMIZE KEYBINDS #
# ------------------ #

# Shuffle leader, command and anchor commands.
map global normal <space> ,        # leader
map global normal \; ":"           # command mode
map global normal <ret> ":"        # command mode
map global normal , "<a-;>"        # swap anchors
map global normal <a-,> "<space>"  # cancel multiple selections

# More convenient line selection
map global normal X "<a-x>"
map global normal <a-x> "X"

# More convenient search
map global normal / "/(?i)"
map global normal ? <a-/>
map global normal <a-/> ?
map global normal N <a-n>
map global normal <a-n> N

# More convenient yanking
map global normal D "<a-x>d"
map global normal Y "<a-x>y"

# Clipboard integration
map global user y ": clipboard-copy<ret>" -docstring "copy to clipboard"
map global user Y "<a-x>: clipboard-copy<ret>" -docstring "copy line to clipboard"
map global user p ": clipboard-paste after<ret>" \
    -docstring "paste after from clipboard"
map global user P ": clipboard-paste before<ret>" \
    -docstring "paste before from clipboard"

# Commenting shortcut
map global user c ": comment-line<ret>"  -docstring "comment selected lines"

# Pane splitting (preserving buffer and line number)
define-command split -params 0..1 -docstring "Splits the current pane" %{
    nop %sh{
        if [[ -f "$kak_buffile" ]]; then
            file="+$kak_cursor_line $kak_buffile"
        fi
        ~/.dotfiles/tmux/layout.py split $1 -- kak -c "$kak_session" $file
    }
}
define-command sp %{ split -v }
define-command vsp %{ split -h }

map global user s ": split<ret>" -docstring "split window"
map global user <a-s> ": split -v<ret>" -docstring "vertically split window"
map global user w ": write<ret>" -docstring "save buffer"
map global user q ": quit<ret>" -docstring "close current split"
map global user <a-q> ": kill<ret>" -docstring "quit kak session"

# Intelligent escape
define-command escape -docstring "Intelligently handle escape key" %{
    execute-keys -with-hooks %sh{
        if (( "$kak_selection_length" > 1 )); then
            # Collapse selections when larger than one character.
            printf "\;"
        else
            # Otherwise, cancel multiple selection.
            printf "<space>"
        fi
    }
}
map global normal <esc> ": escape<ret>" -docstring "smart escape"

# Intelligent tab completion
hook global InsertCompletionShow .* %{
    try %{
        execute-keys -draft "h<a-K>\h<ret>"
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}


# ----------------- #
# CONFIGURE PLUGINS #
# ----------------- #

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "andreyorst/fzf.kak" defer fzf %{
    set-option global fzf_file_command "ag -l"
    set-option global fzf_preview false
    set-option global fzf_use_main_selection false
} config %{
    map global user z ": fzf-mode<ret>" -docstring "fzf mode"
    map global normal <c-r> ": fzf-mode<ret>f"
}

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global WinCreate .* %{ expandtab }
}

plug "danr/kakoune-easymotion" config %{
    set-face global EasyMotionBackground rgb:787878
    set-face global EasyMotionForeground rgb:ffaf00+bF
    set-face global EasyMotionSelected rgb:875f5f+bF

    # Fix back-word key-bindings:
    unmap global easymotion q
    unmap global easymotion Q
    map global easymotion b ": easy-motion-b<ret>" -docstring "word ←"
    map global easymotion B ": easy-motion-B<ret>" -docstring "WORD ←"

    map global user <space> ": enter-user-mode easymotion<ret>" \
        -docstring "easymotion"
}

plug "smartsearch" config %{
    set-face global SearchMatch +bu
    map global normal * ": smartsearch-select<ret>"
    map global user n ": smartsearch-toggle<ret>" \
        -docstring "toggle search highlighting"
    smartsearch-enable
}

plug "smartcursor" config %{
    set-face global CursorLine default,rgb:3a3a3a
    hook global WinCreate .* %{
        smartcursor-enable
        smartcursor-enable-lines
    }
}

plug "comment-object" config %{
    map global object C c -docstring "custom object desc"

    map global object c "<a-;>comment-object<ret>" -docstring "comments"
    map global object <a-c> "<a-;>comment-object-paragraph<ret>" \
        -docstring "comment paragraphs"

    hook global WinCreate .* %{
        comment-object-enable-autowrap
    }
}

plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    set-option global lsp_diagnostic_line_error_sign "▶"
    set-option global lsp_diagnostic_line_warning_sign "▷"

    set-face global DiagnosticError white,red+bfg
    set-face global DiagnosticWarning black,yellow+fg

    hook global WinSetOption filetype=(rust|python|c|cpp) %{
        map window user l ": enter-user-mode lsp<ret>" -docstring "lsp diagnostics"
        lsp-enable-window
    }
}


# ---------------- #
# LOAD EXTRA FILES #
# ---------------- #

evaluate-commands %sh{
    for file in $kak_config/rc/*.kak; do
        printf 'source "%s"\n' $file
    done
}
